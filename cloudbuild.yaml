steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'  
  args: 
  - '-c'
  - | 
      echo "***********************"
      echo "$BRANCH_NAME"
      echo "***********************"
# [START tf-init]
- id: 'tf init'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "env/$BRANCH_NAME/" ]; then
        cd profiles/GKE
        terraform init
      else
        for dir in env/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../
        done
      fi 
# [STOP tf-init]      

# [START tf-plan]
- id: 'tf plan'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "env/$BRANCH_NAME/" ]; then
        cd profiles/GKE
        terraform plan -var-file="./../../env/$BRANCH_NAME/$BRANCH_NAME.tfvars" 
      else
        for dir in env/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan -var-file="./../../env/$BRANCH_NAME/$BRANCH_NAME.tfvars"|| exit 1
          cd ../../
        done
      fi 
# [END tf-plan]

# [START tf-apply]
- id: 'tf apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "env/$BRANCH_NAME/" ]; then
        cd profiles/GKE     
        terraform apply -var-file="./../../env/$BRANCH_NAME/$BRANCH_NAME.tfvars" -auto-approve
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an oficial environment."
        echo "*******************************************************************************"
      fi
  timeout: 1200s
# [END tf-apply]


- id: 'create namespace'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "env/$BRANCH_NAME/"]; then
        gcloud container clusters get-credentials gke-boutique-cluster --region europe-north1 --project team-2-a
        namespaceStatus=$(kubectl get ns $BRANCH_NAME -o json | jq .status.phase -r)
        if [ $namespaceStatus == "Active" ]
        then
          echo "namespace is present"
        else
          kubectl create namespace $BRANCH_NAME
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an oficial environment."
        echo "*******************************************************************************"
      fi
  timeout: 3600s 
timeout: 3600s